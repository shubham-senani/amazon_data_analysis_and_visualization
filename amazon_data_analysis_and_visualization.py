# -*- coding: utf-8 -*-
"""Amazon Data Analysis and Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MKYqPN4x8oYRL3_mAydX_qYVLstcNoOI
"""

import pandas as pd
df = pd.read_csv("amazon.csv")
df.head()

df.shape

df.info()

df = df.drop(["product_link", "img_link", "review_id", "review_title", "review_content"	],axis = 1)

df.shape

print(df.isnull().any())
# print(df.iloc[[]].isnull().any());

new_df = df.dropna(axis=0)
print(new_df.shape)

new_df.info()

price_data = pd.DataFrame(new_df["discounted_price"].str.replace('₹', '').str.replace(",", "").astype(float))
price_data["actual_price"] = new_df["actual_price"].str.replace('₹', "").str.replace(",", "").astype(float)
# print(data.dtypes)
price_matrix = price_data.corr()
print(price_matrix)

rating_data = pd.DataFrame(new_df["rating_count"].str.replace(',', '').astype(float))
rating_data["rating"] = new_df["rating"].str.replace('|', "0").astype(float)
# print(data.dtypes)
rat_matrix = rating_data.corr()
print(rat_matrix)

price_rating = pd.DataFrame(price_data)
price_rating["rating"] = rating_data["rating"]
price_rating["rating_count"] = rating_data["rating_count"]
price_rating.head()

corr_matrix = price_rating.corr()
print(corr_matrix)

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,10))
plt.title('Correlation Matrix')
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
plt.show()

import matplotlib.pyplot as plt

plt.subplots(figsize=(14, 10))

# Create a histogram of the ratings column
plt.hist(rating_data['rating'], bins=10)

# Add a title and axis labels
plt.title('Distribution of Ratings')
plt.xlabel('Ratings')
plt.ylabel('Number of Items')

# Show the plot
plt.show()

plt.subplots(figsize=(15,10))
# Create a scatter plot of discounted price against rating count
plt.scatter(rating_data['rating_count'], price_data['discounted_price'], color ='g')

# Add a title and axis labels
plt.title('Discounted Price vs Rating Count')
plt.xlabel('Rating Count')
plt.ylabel('Discounted Price')

# Show the plot
plt.show()

hell = pd.DataFrame(new_df["discount_percentage"].str.replace('%','').astype(int))
print(hell.dtypes)
print

combo_data = pd.DataFrame(price_data["discounted_price"])
combo_data["actual_price"] = price_data["actual_price"]
combo_data["rating"] = rating_data["rating"]
combo_data["rating_count"] = rating_data["rating_count"];
combo_data["category"] = new_df["category"]
combo_data["product_name"] = new_df["product_name"]
combo_data["discount_percentage"] = hell["discount_percentage"]

plt.subplots(figsize=(15,10))
# Filter the dataframe to include only products with a user rating greater than 4.1 and a discount greater than 50%
filtered_df = combo_data[(combo_data['rating'] > 4.1) & (combo_data['discount_percentage'] > 50)]

# Create a scatter plot for each category
colors = ['red', 'green', 'blue', 'purple']
categories = filtered_df['category'].unique()
for i, category in enumerate(categories):
    data = filtered_df[filtered_df['category'] == category]
    plt.scatter(data['discount_percentage'], data['rating'], label=category)

# Add a title and axis labels
plt.title('Discount vs User Rating for Different Categories')
plt.xlabel('Discount')
plt.ylabel('User Rating')

# Add a legend
# plt.legend()

# Show the plot
plt.show()

print(filtered_df.shape)
count_by_category = filtered_df.groupby('category')['product_name'].count();
print(count_by_category)

df_tv = df[df['category'] == 'Electronics|HomeTheater,TV&Video|Televisions|SmartTelevisions']
plt.subplots(figsize=(15,10))
# Create a scatter plot of discount vs. sales rank
plt.scatter(x=df_tv['discount_percentage'].astype(str), y=df_tv['rating_count'].astype(str), alpha=0.5, color='green')

# Add labels and title to the plot
plt.xlabel('Discount')
plt.ylabel('Rating Count')
plt.title('Discount vs. Sales Rank for TV Products')

plt.xticks([])
plt.yticks([])


# Show the plot
plt.show()